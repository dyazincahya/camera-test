"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("./image-cache-it.common");
var imageSrc = require("tns-core-modules/image-source");
var view_1 = require("tns-core-modules/ui/core/view");
var image_cache_it_common_1 = require("./image-cache-it.common");
var ImageCacheIt = (function (_super) {
    __extends(ImageCacheIt, _super);
    function ImageCacheIt() {
        var _this = _super.call(this) || this;
        _this.nativeView = UIImageView.new();
        _this.nativeView.contentMode = 1;
        _this.nativeView.clipsToBounds = true;
        return _this;
    }
    ImageCacheIt.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
        var nativeView = this.nativeView;
        if (nativeView) {
            var width = view_1.layout.getMeasureSpecSize(widthMeasureSpec);
            var height = view_1.layout.getMeasureSpecSize(heightMeasureSpec);
            this.setMeasuredDimension(width, height);
        }
    };
    ImageCacheIt.prototype.initNativeView = function () {
        var _this = this;
        if (this.imageUri && this.imageUri.startsWith('http')) {
            this.isLoading = true;
            this.nativeView.sd_setImageWithURLPlaceholderImageCompleted(this.imageUri, this.placeHolder
                ? imageSrc.fromFileOrResource(this.placeHolder).ios
                : null, function () {
                _this.isLoading = false;
            });
        }
        else if (this.imageUri) {
            var source = imageSrc.fromFileOrResource(this.imageUri);
            console.log(source);
            this.nativeView.image = source ? source.ios : null;
        }
        if (this.resize &&
            this.resize !== undefined &&
            this.resize.split(' ').length > 1) {
            this.nativeView.frame.size.width = parseInt(this.resize.split(',')[0]);
            this.nativeView.frame.size.height = parseInt(this.resize.split(',')[1]);
        }
    };
    ImageCacheIt.prototype[common.imageUriProperty.getDefault] = function () {
        return undefined;
    };
    ImageCacheIt.prototype[common.imageUriProperty.setNative] = function (src) {
        var _this = this;
        if (!src)
            return src;
        if (src.startsWith('http')) {
            this.isLoading = true;
            this.nativeView.sd_setImageWithURLPlaceholderImageCompleted(src, this.placeHolder
                ? imageSrc.fromFileOrResource(this.placeHolder).ios
                : null, function (p1, p2, p3, p4) {
                _this.isLoading = false;
                if (p2 && _this.errorHolder) {
                    var source = imageSrc.fromFileOrResource(_this.errorHolder);
                    _this.nativeView.image = source ? source.ios : null;
                }
            });
        }
        else {
            var source = imageSrc.fromFileOrResource(src);
            this.nativeView.image = source ? source.ios : null;
        }
        return src;
    };
    ImageCacheIt.prototype[common.resizeProperty.setNative] = function (resize) {
        if (!this.nativeView)
            return resize;
        if (this.resize &&
            this.resize !== undefined &&
            this.resize.split(',').length > 1) {
            this.nativeView.frame.size.width = parseInt(this.resize.split(' ')[0]);
            this.nativeView.frame.size.height = parseInt(this.resize.split(' ')[1]);
        }
        return resize;
    };
    ImageCacheIt.prototype[common.stretchProperty.getDefault] = function () {
        return 'aspectFit';
    };
    ImageCacheIt.prototype[common.stretchProperty.setNative] = function (value) {
        if (!this.nativeView)
            return value;
        switch (value) {
            case 'aspectFit':
                this.nativeView.contentMode = 1;
                break;
            case 'aspectFill':
                this.nativeView.contentMode = 2;
                break;
            case 'fill':
                this.nativeView.contentMode = 0;
                break;
            case 'none':
            default:
                this.nativeView.contentMode = 9;
                break;
        }
        return value;
    };
    ImageCacheIt.prototype.clearItem = function () { };
    return ImageCacheIt;
}(image_cache_it_common_1.ImageCacheItBase));
exports.ImageCacheIt = ImageCacheIt;
//# sourceMappingURL=image-cache-it.ios.js.map